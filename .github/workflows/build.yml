name: Build

on: workflow_call

jobs:
  build:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    steps:
      - name: 'Checkout Repo'
        uses: actions/checkout@v4
        with:
          path: java_app

      - uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Get the approval comment
        id: get_comment
        run: |
          cd java_app
          {
            echo 'comment<<EOF'
            git log -1 --format=%B ${{ github.sha }}
            echo EOF
          } >> "$GITHUB_OUTPUT"

      - name: Show approval comment
        id: show_comment
        run: echo "${{ steps.get_comment.outputs.comment }}"

      - name: Set local git creddentials
        run: |
          git config --global user.email "kevin.ardila@bvc.com.co"
          git config --global user.name "kevardila"

      - name: Get issue
        id: get_issue
        run: |
          var=${{github.ref_name}}
          echo "issue=$(echo $var | sed -E 's#.*/##')">> "$GITHUB_OUTPUT"

      # Falla cuando se modifique el pom ---------------------------------------------------------------------
      - name: Generate bumping version as patch
        id: patch
        if: contains(steps.get_comment.outputs.comment, 'patch')
        run: |
          cd java_app
          npx @dwmkerr/standard-version --release-as patch --packageFiles pom.xml --bumpFiles pom.xml

      - name: Generate bumping version as minor
        id: minor
        if: contains(steps.get_comment.outputs.comment, 'minor')
        run: |
          cd java_app
          npx @dwmkerr/standard-version --release-as minor --packageFiles pom.xml --bumpFiles pom.xml

      - name: Generate bumping version as major
        id: major
        if: contains(steps.get_comment.outputs.comment, 'major')
        run: |
          cd java_app
          npx @dwmkerr/standard-version --release-as major --packageFiles pom.xml --bumpFiles pom.xml
      # ------------------------------------------------------------------------------------------------------

      - name: Push changelog and pom.xml
        run: |
          cd java_app
          git push

      - name: Push generated tag
        run: |
          cd java_app
          git push --tags

      - name: Get created semantic tag
        id: get_created_tag
        run: |
          cd java_app
          echo "created_version=$(git log -1 --pretty=%B | sed -n 's/.*: \([0-9]\+\.[0-9]\+\.[0-9]\+\)$/\1/p')" >> $GITHUB_OUTPUT



      - name: checkout del repositorio templates
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.DEVOPS_NUAM }}
          repository: 'bvcco/lab_devops_templates'
          ref: 'development'
          path: dockerfile
          sparse-checkout: |
            scripts/dockerfiles/Dockerfile.template-java
          sparse-checkout-cone-mode: false
      - name: tree directory
        run: tree -a .
      - name: Copying Dockerfile
        run: cp ./dockerfile/scripts/dockerfiles/Dockerfile.template-java ./java_app/Dockerfile
      #--------------------------------------------------
      - name: 'Setup Java JDK'
        uses: actions/setup-java@v4 # more documentation
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven
      - run: |
          cd java_app
          mvn org.apache.maven.plugins:maven-dependency-plugin:3.6.1:analyze-report -DignoreNonCompile=true
          tar -czf report.tar.gz target/site/
      #Posible fallo
      - name: Compile the Project
        id: compile
        run: |
          cd java_app
          mvn compile
      #Posible fallo
      - name: Build with Maven
        id: package
        run: |
          cd java_app
          mvn -B package --file pom.xml
          mkdir staging && cp target/gs-maven-${{ steps.get_created_tag.outputs.created_version }}.jar staging && mkdir report && cp report.tar.gz report
      - uses: actions/upload-artifact@v4
        with:
          name: jar-artifact
          path: ./java_app/staging/
      - uses: actions/upload-artifact@v4
        with:
          name: dependency-report
          path: ./java_app/report/
      #------------------------------------------------------
      - uses: docker/login-action@v3
        with:
          registry: registry.nuamexchange.com
          username: ${{ secrets.HARBOR_USERNAME  }}
          password: ${{ secrets.HARBOR_PASS }}
      - uses: actions/download-artifact@v4
        with:
          name: jar-artifact
          path: ./java_app/staging/
      #Posible fallo
      - name: Build and push
        id: kaniko
        run: |
          cd java_app
          AUTH=$(echo -n robot\$test-devops:${{ secrets.HARBOR_PASS }} | base64)
          cat << EOF > config.json
          {
            "auths":{
              "registry.nuamexchange.com/test-devops/jar-artifact":{
                "username":"robot\$test-devops","password":"${{ secrets.HARBOR_PASS }}","auth":"${AUTH}"
              }
            }
          }
          EOF
          tree -a .
          docker run \
            -v $(pwd):/workspace \
            -v $(pwd)/config.json:/kaniko/.docker/config.json:ro \
            gcr.io/kaniko-project/executor:latest \
              --context . \
              --build-arg "jdk_image=eclipse-temurin:17" \
              --build-arg "jar_file_path=target/gs-maven-${{ steps.get_created_tag.outputs.created_version }}.jar" \
              --dockerfile=Dockerfile \
              --destination registry.nuamexchange.com/test-devops/jar-artifact:${{ steps.get_created_tag.outputs.created_version }}

      - name: Configure message notification
        if: success() || failure()
        id: get_comment
        run: |
          ejecuciones["patch"]="${{ steps.patch.conclusion}}"
          ejecuciones["minor"]="${{ steps.minor.conclusion}}"
          ejecuciones["major"]="${{ steps.major.conclusion}}"
          ejecuciones["compilar"]="${{ steps.compile.conclusion}}"
          ejecuciones["empaquetar"]="${{ steps.package.conclusion}}"
          ejecuciones["kaniko"]="${{ steps.kaniko.conclusion}}" 
          
          # Recorrer todas las claves
          for clave in "${!ejecuciones[@]}"; do
            # Evaluar si la clave es "patch", "minor" o "major"
            if [[ "$clave" == "patch" || "$clave" == "minor" || "$clave" == "major" ]]; then
              # Evaluar si el valor de la clave es "failure"
              if [[ "${ejecuciones[$clave]}" == "failure" ]]; then
                echo "comment=El tipo de version $clave no se puede generar revise el archivo pom.xml o verifique el workflow" >> "$GITHUB_OUTPUT"
              fi
            elif [[ "$clave" == "compilar" || "$clave" == "empaquetar" ]]; then
              if [[ "${ejecuciones[$clave]}" == "failure" ]]; then
                echo "comment=Error al $clave, por favor verifique el workflow y solucione el error" >> "$GITHUB_OUTPUT"
              fi
            elif [[ "$clave" == "build"  ]]; then
              if [[ "${ejecuciones[$clave]}" == "failure" ]]; then
                echo "comment=Error al crear la imagen de Kaniko, revise el workflow y de ser necesario actualice las credenciales">> "$GITHUB_OUTPUT"
              fi
            fi
          done


      - name: Send notification
        if: success() || failure()
        run: |
          curl --request POST \
            --url 'https://nuamexchange.atlassian.net/rest/api/3/issue/${{steps.get_issue.outputs.issue}}/comment' \
            --user 'alexander.rodriguez@nuamx.com:${{secrets.JIRA_TOKEN}}' \
            --header 'Accept: application/json' \
            --header 'Content-Type: application/json' \
            --data '{
              "body": {
                "content": [
                  {
                    "content": [
                    {
                      "text": "${{steps.get_comment.outputs.comment}}",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                  }
                ],
                "type": "doc",
                "version": 1
              }
            }'